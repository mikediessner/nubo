{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Constrained Bayesian optimisation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "New best at evaluation 37: \t Inputs: [0.2957 0.2043 0.5873 0.2205 0.2488 0.7749], \t Outputs: [-2.5862]\n",
      "New best at evaluation 41: \t Inputs: [0.2762 0.2129 0.5612 0.2206 0.2766 0.747 ], \t Outputs: [-2.8477]\n",
      "New best at evaluation 45: \t Inputs: [0.2587 0.     0.5491 0.2672 0.274  0.703 ], \t Outputs: [-2.867]\n",
      "New best at evaluation 50: \t Inputs: [0.2671 0.2329 0.52   0.2676 0.2833 0.6934], \t Outputs: [-3.1119]\n",
      "New best at evaluation 51: \t Inputs: [0.2393 0.1902 0.4034 0.2632 0.3038 0.6772], \t Outputs: [-3.2298]\n",
      "New best at evaluation 54: \t Inputs: [0.2175 0.1541 0.4372 0.285  0.3091 0.6501], \t Outputs: [-3.3029]\n",
      "New best at evaluation 60: \t Inputs: [0.2094 0.1434 0.486  0.2706 0.3062 0.6675], \t Outputs: [-3.3153]\n",
      "New best at evaluation 62: \t Inputs: [0.2042 0.1543 0.484  0.2716 0.3087 0.6639], \t Outputs: [-3.3197]\n",
      "New best at evaluation 63: \t Inputs: [0.2046 0.1547 0.4831 0.2726 0.3091 0.6625], \t Outputs: [-3.3204]\n",
      "New best at evaluation 64: \t Inputs: [0.2044 0.1565 0.4828 0.274  0.3093 0.6609], \t Outputs: [-3.3208]\n",
      "New best at evaluation 65: \t Inputs: [0.2038 0.1558 0.4806 0.2732 0.3105 0.6605], \t Outputs: [-3.3213]\n",
      "Evaluation: 65 \t Solution: 3.3213\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "from nubo.acquisition import ExpectedImprovement, UpperConfidenceBound\n",
    "from nubo.models import GaussianProcess, fit_gp\n",
    "from nubo.optimisation import slsqp\n",
    "from nubo.test_functions import Hartmann6D\n",
    "from nubo.utils import gen_inputs\n",
    "from gpytorch.likelihoods import GaussianLikelihood\n",
    "\n",
    "\n",
    "# test function\n",
    "func = Hartmann6D(minimise=False)\n",
    "dims = func.dims\n",
    "bounds = func.bounds\n",
    "\n",
    "# training data\n",
    "x_train = gen_inputs(num_points=dims*5,\n",
    "                     num_dims=dims,\n",
    "                     bounds=bounds)\n",
    "y_train = func(x_train)\n",
    "\n",
    "# Bayesian optimisation loop\n",
    "iters = 40\n",
    "\n",
    "for iter in range(iters):\n",
    "    \n",
    "    # specify Gaussian process\n",
    "    likelihood = GaussianLikelihood()\n",
    "    gp = GaussianProcess(x_train, y_train, likelihood=likelihood)\n",
    "    \n",
    "    # fit Gaussian process\n",
    "    fit_gp(x_train, y_train, gp=gp, likelihood=likelihood, lr=0.1, steps=200)\n",
    "\n",
    "    # specify acquisition function\n",
    "    # acq = ExpectedImprovement(gp=gp, y_best=torch.max(y_train))\n",
    "    acq = UpperConfidenceBound(gp=gp, beta=1.96**2)\n",
    "\n",
    "    # define constraints\n",
    "    cons = ({'type': 'ineq', 'fun': lambda x: 0.5 - x[0] - x[1] },\n",
    "            {'type': 'eq', 'fun': lambda x: 1.2442 - x[3] - x[4] - x[5]})\n",
    "    \n",
    "    # optimise acquisition function\n",
    "    x_new, _ = slsqp(func=acq, bounds=bounds, constraints=cons, num_starts=5)\n",
    "\n",
    "    # evaluate new point\n",
    "    y_new = func(x_new)\n",
    "    \n",
    "    # add to data\n",
    "    x_train = torch.vstack((x_train, x_new))\n",
    "    y_train = torch.hstack((y_train, y_new))\n",
    "\n",
    "    # print new best\n",
    "    if y_new > torch.max(y_train[:-1]):\n",
    "        print(f\"New best at evaluation {len(y_train)}: \\t Inputs: {x_new.numpy().reshape(dims).round(4)}, \\t Outputs: {-y_new.numpy().round(4)}\")\n",
    "\n",
    "# results\n",
    "best_iter = int(torch.argmax(y_train))\n",
    "print(f\"Evaluation: {best_iter+1} \\t Solution: {float(y_train[best_iter]):.4f}\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "env",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.1"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "440ccce7314e8ea21bc6387ad3e4b0d06ade5f0dbc76119080186fc1c6dec90d"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
